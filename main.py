
import streamlit as st
from bert_utils import BertEmbeddingExtractor
from visualization import create_vector_plot, create_attention_heatmap
from styles import get_styles

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
# –°–æ–∑–¥–∞–µ–º —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä BERT —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if 'bert_extractor' not in st.session_state:
    st.session_state.bert_extractor = BertEmbeddingExtractor()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
styles = get_styles()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è BERT –≠–º–±–µ–¥–¥–∏–Ω–≥–æ–≤",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π CSS
st.markdown("""
    <style>
    /* –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è */
    .stApp {
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
    }
    /* –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ */
    .stButton>button {
        width: 100%;
        margin-top: 1rem;
        background: linear-gradient(45deg, #2193b0, #6dd5ed);
        color: white;
        border-radius: 10px;
        padding: 0.8rem 1.5rem;
        border: none;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
    }
    /* –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É */
    .stButton>button:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }
    /* –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è */
    .stTextArea>div>div>textarea {
        border: 2px solid #e0e0e0;
        border-radius: 10px;
        padding: 1rem;
        font-size: 16px;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å—Ç–∏–ª–µ–º
st.markdown("""
    <div style='background: linear-gradient(45deg, #2193b0, #6dd5ed); padding: 2rem; border-radius: 15px; color: white; text-align: center; margin-bottom: 2rem; box-shadow: 0 4px 6px rgba(0,0,0,0.1);'>
        <h1>–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è BERT –≠–º–±–µ–¥–¥–∏–Ω–≥–æ–≤</h1>
        <p style='font-size: 1.2rem; margin-top: 1rem;'>
            –ò—Å—Å–ª–µ–¥—É–π—Ç–µ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã BERT —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–µ–∫—Å—Ç–∞.
            –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∞–Ω–∞–ª–∏–∑–∞.
        </p>
    </div>
    """,
    unsafe_allow_html=True
)

# –°–µ–∫—Ü–∏—è –≤–≤–æ–¥–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º
with st.container():
    # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
    text_input = st.text_area(
        "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
        "–ü—Ä–∏–≤–µ—Ç –º–∏—Ä!",
        help="–í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –µ–≥–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤"
    )

    # –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
    if st.button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç"):
        if text_input.strip():
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–∏ –∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
            tokenization = st.session_state.bert_extractor.get_tokenization(text_input)
            embeddings = st.session_state.bert_extractor.get_embeddings(text_input)

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–∏
            st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–∏")
            st.write("–¢–æ–∫–µ–Ω—ã:", embeddings['tokens'])

            # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
            tab1, tab2, tab3, tab4, tab5 = st.tabs([
                "–≠–º–±–µ–¥–¥–∏–Ω–≥–∏ —Ç–æ–∫–µ–Ω–æ–≤",
                "–ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏",
                "–≠–º–±–µ–¥–¥–∏–Ω–≥–∏ —Ç–∏–ø–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤",
                "CLS –≤–µ–∫—Ç–æ—Ä",
                "–ö–∞—Ä—Ç–∞ –≤–Ω–∏–º–∞–Ω–∏—è"
            ])

            # –í–∫–ª–∞–¥–∫–∞ —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏ —Ç–æ–∫–µ–Ω–æ–≤
            with tab1:
                for idx, token in enumerate(embeddings['tokens']):
                    st.subheader(f"–¢–æ–∫–µ–Ω: {token}")
                    st.plotly_chart(
                        create_vector_plot(
                            embeddings['token_embeddings'][idx],
                            f"–í–µ–∫—Ç–æ—Ä —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ '{token}'"
                        ),
                        use_container_width=True,
                        key=f"token_emb_{idx}"
                    )

            # –í–∫–ª–∞–¥–∫–∞ —Å –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–º–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏
            with tab2:
                for idx, token in enumerate(embeddings['tokens']):
                    st.subheader(f"–ü–æ–∑–∏—Ü–∏—è {idx} (—Ç–æ–∫–µ–Ω: {token})")
                    st.plotly_chart(
                        create_vector_plot(
                            embeddings['position_embeddings'][idx],
                            f"–ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {idx}"
                        ),
                        use_container_width=True,
                        key=f"pos_emb_{idx}"
                    )

            # –í–∫–ª–∞–¥–∫–∞ —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏ —Ç–∏–ø–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤
            with tab3:
                for idx, token in enumerate(embeddings['tokens']):
                    st.subheader(f"–¢–æ–∫–µ–Ω: {token}")
                    st.plotly_chart(
                        create_vector_plot(
                            embeddings['token_type_embeddings'][idx],
                            f"–≠–º–±–µ–¥–¥–∏–Ω–≥ —Ç–∏–ø–∞ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è '{token}'"
                        ),
                        use_container_width=True,
                        key=f"type_emb_{idx}"
                    )

            # –í–∫–ª–∞–¥–∫–∞ —Å CLS –≤–µ–∫—Ç–æ—Ä–æ–º
            with tab4:
                st.subheader("CLS –≤–µ–∫—Ç–æ—Ä")
                st.plotly_chart(
                    create_vector_plot(
                        embeddings['cls_vector'],
                        "–ó–Ω–∞—á–µ–Ω–∏—è CLS –≤–µ–∫—Ç–æ—Ä–∞"
                    ),
                    use_container_width=True,
                    key="cls_vector"
                )
                
            # –í–∫–ª–∞–¥–∫–∞ —Å –∫–∞—Ä—Ç–æ–π –≤–Ω–∏–º–∞–Ω–∏—è
            with tab5:
                st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–Ω–∏–º–∞–Ω–∏—è –º–µ–∂–¥—É —Ç–æ–∫–µ–Ω–∞–º–∏")
                st.plotly_chart(
                    create_attention_heatmap(
                        embeddings['attention_weights'],
                        embeddings['tokens']
                    ),
                    use_container_width=True
                )
        else:
            st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–µ–∫—Ü–∏–∏ –≤–Ω–∏–∑—É
st.markdown("""
---
### –û BERT —ç–º–±–µ–¥–¥–∏–Ω–≥–∞—Ö

- **–≠–º–±–µ–¥–¥–∏–Ω–≥–∏ —Ç–æ–∫–µ–Ω–æ–≤**: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –≤–æ –≤—Ö–æ–¥–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
- **–ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏**: –ö–æ–¥–∏—Ä—É—é—Ç –ø–æ–∑–∏—Ü–∏—é –∫–∞–∂–¥–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
- **–≠–º–±–µ–¥–¥–∏–Ω–≥–∏ —Ç–∏–ø–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤**: –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —Ä–∞–∑–ª–∏—á–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –≤–æ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- **CLS –≤–µ–∫—Ç–æ—Ä**: –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –≤—Å—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
""")
